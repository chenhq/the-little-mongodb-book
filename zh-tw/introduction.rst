****
簡介
****

    *如果覺得這本書的頁數怎麼這麼少，請別怪作者，\
    因為 MongoDB 本來就是如此易學易用。*

軟體開發技術演進的腳步飛快，\
有一大票新科技及技術被發佈，\
然而，長久以來，我總認為程式設計師會用到的基本技術並無太多變化，\
可以花費幾年時間來學習。\
需要訝異的是那些已經建立的技術被取代的速度，\
貌似一夕之間，\
長期建立的技術因為開發人員的焦點轉變而感到威脅。

突如其來的轉變，沒什麼比 NoSQL 技術更有代表性，\
它用來解決基礎穩固的關聯式資料庫不易處理的問題。\
就像某一天你突然發現，\
許多 Web 不再僅使用關聯式資料庫管理系統（RDBMS），\
取而代之的是發展成完善解決方案的 NoSQL 技術。

儘管 NoSQL 像是在一夕之間就帶來改變，\
但事實是必須經過幾年它才可能成為被廣泛接受的實踐方式。\
最初可能是由一些相對較小的開發者及公司開始運用，\
解決方案被改善、從中獲得經驗教訓，\
新技術逐漸被採用，其他人也開始緩步嘗試。\
NoSQL 有許多技術都不是用來取代傳統的儲存方案，\
而是用於滿足其中那些傳統資料庫無法應付的特定需求。

講到這裡，我們該解釋 NoSQL 的意義。\
它是一個泛用的名詞，對不同人來說會有不同意義。\
我個人使用 NoSQL 泛指一個負責儲存資料的的系統，\
和一般傳統資料庫不同的是，\
NoSQL 的理念是資料持久層（persistence layer）不應該是單一系統的責任，\
資料庫廠商在過去總是想讓資料庫軟體定位成放諸四海皆準的解決方案，\
而 NoSQL 傾向讓資料庫的責任更小一點，\
對特定任務使用最佳的工具來解決。\
所以你的 NoSQL 方案可能仍包含關連資料庫（例如 MySQL），\
但同時採用 Redis 處理某些特定資料查詢，\
以及使用 Hadoop 來處理密集的資料處理，\
簡單地說，NoSQL 就是用其他方法和工具管理你的資料。

作為一個文件導向（document-oriented）資料庫，\
Mongo 是一種更廣義的 NoSQL 解決方案。\
它必須是當作關聯式資料庫的替代方案來看待，\
可以將它和特定用途的 NoSQL 方案搭配使用而獲益，\
MongoDB 有優點也有缺點，\
本書將會陸續說明。

讀者可能需要注意，\
這本書交互使用 MongoDB 或 Mongo 等字詞，並沒有差異。\

.. raw:: latex

   \setcounter{secnumdepth}{1}

